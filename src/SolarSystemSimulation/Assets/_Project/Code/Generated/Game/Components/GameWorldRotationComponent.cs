//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWorldRotation;

    public static Entitas.IMatcher<GameEntity> WorldRotation {
        get {
            if (_matcherWorldRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WorldRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWorldRotation = matcher;
            }

            return _matcherWorldRotation;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public SolarSystem.Gameplay.WorldRotation worldRotation { get { return (SolarSystem.Gameplay.WorldRotation)GetComponent(GameComponentsLookup.WorldRotation); } }
    public UnityEngine.Quaternion WorldRotation { get { return worldRotation.Value; } }
    public bool hasWorldRotation { get { return HasComponent(GameComponentsLookup.WorldRotation); } }

    public GameEntity AddWorldRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.WorldRotation;
        var component = (SolarSystem.Gameplay.WorldRotation)CreateComponent(index, typeof(SolarSystem.Gameplay.WorldRotation));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceWorldRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.WorldRotation;
        var component = (SolarSystem.Gameplay.WorldRotation)CreateComponent(index, typeof(SolarSystem.Gameplay.WorldRotation));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveWorldRotation() {
        RemoveComponent(GameComponentsLookup.WorldRotation);
        return this;
    }
}
