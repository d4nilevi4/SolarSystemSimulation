//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSolarSystemObject;

    public static Entitas.IMatcher<GameEntity> SolarSystemObject {
        get {
            if (_matcherSolarSystemObject == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SolarSystemObject);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSolarSystemObject = matcher;
            }

            return _matcherSolarSystemObject;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    static readonly SolarSystem.Gameplay.SolarSystem.SolarSystemObject solarSystemObjectComponent = new SolarSystem.Gameplay.SolarSystem.SolarSystemObject();

    public bool isSolarSystemObject {
        get { return HasComponent(GameComponentsLookup.SolarSystemObject); }
        set {
            if (value != isSolarSystemObject) {
                var index = GameComponentsLookup.SolarSystemObject;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : solarSystemObjectComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}
